{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\Navigation.svelte",
    "..\\src\\messageTypes\\MessageRenderer.svelte",
    "..\\src\\messageTypes\\GenericMsg.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { connected, navigate, routeLocation } from \"./utils.js\";\n\n  let avatar = \"/images/icon.png\";\n\n  $: if ($connected) {\n    ssb.avatar(ssb.feed).then(data => {\n      avatar = `http://localhost:8989/blobs/get/${data.image}`;\n    });\n  }\n\n  const goSettings = ev => {\n    browser.runtime.openOptionsPage();\n  };\n\n  const goCompose = () => navigate(\"/compose\")\n  const goPublic = () => navigate(\"/public\")\n\n  const openSidebar = async ev => {\n    let loc = window.location.href;\n    browser.sidebarAction.setPanel({ panel: loc });\n    browser.sidebarAction.open();\n    let tab = await browser.tabs.getCurrent();\n    await browser.tabs.remove(tab.id);\n  };\n\n  const closeSidebar = async ev => {\n    let loc = await browser.sidebarAction.getPanel({});\n    await browser.tabs.create({ url: loc });\n    await browser.sidebarAction.close();\n  };\n\nconst openMyProfile = ev => {\n  ev.stopPropagation();\n  ev.preventDefault();\n\n  if (ssb.feed) {\n    navigate(\"/profile\", {feed: ssb.feed})\n  }\n}\n</script>\n\n<style>\n  .blocker {\n    height: 70px;\n    display: block;\n  }\n\n  .above {\n    z-index: 99999;\n    width: 100;\n    padding: 5px;\n    position: fixed;\n  }\n\n  .current {\n    border: none;\n    background: none;\n    border-bottom: solid 2px rgb(2, 146, 50);\n    outline: none;\n  }\n</style>\n\n<header class=\"navbar\">\n  <section class=\"navbar-section hide-sm\">\n    <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={openSidebar}>\n      <i class=\"icon icon-minus text-black\" />\n    </a>\n    <a href=\"#\" class=\"navbar-brand mr-2 p-1\" on:click={openMyProfile}>\n      <figure class=\"avatar avatar-lg\">\n        <img src={avatar} alt=\"L\" />\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\n      </figure>\n    </a>\n    <a\n      href=\"#/compose\"\n      class=\"btn btn-link\"\n      class:current={$routeLocation == \"/compose\"}\n      on:click|stopPropagation|preventDefault={goCompose}>\n      New\n    </a>\n    <a\n      href=\"#/public\"\n      class=\"btn btn-link\"\n      class:current={$routeLocation == \"/public\"}\n      on:click|stopPropagation|preventDefault={goPublic}>\n      Public\n    </a>\n    <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>Settings</a>\n    <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\n  </section>\n  <section class=\"navbar-section show-sm bg-gray above\">\n    <a href=\"...\" class=\"navbar-brand mr-2 p-1\">\n      <figure class=\"avatar\">\n        <img src={avatar} alt=\"L\" />\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\n      </figure>\n    </a>\n    <div class=\"dropdown float-right\">\n      <a\n        href=\"?\"\n        class=\"btn btn-link dropdown-toggle\"\n        tabindex=\"0\"\n        on:click|stopPropagation|preventDefault={() => \"\"}>\n        Menu\n        <i class=\"icon icon-caret\" />\n      </a>\n      <!-- menu component -->\n      <ul class=\"menu\">\n        <li class=\"menu-item\">\n          <a href=\"#/compose\" class=\"btn btn-link\">New</a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"#/public\" class=\"btn btn-link\">Public</a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>\n            Settings\n          </a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={closeSidebar}>\n            Open as a Tab\n          </a>\n        </li>\n      </ul>\n    </div>\n  </section>\n  <div class=\"blocker show-sm\" />\n</header>\n",
    "<script>\n  import PostMsg from \"./PostMsg.svelte\";\n  import GenericMsg from \"./GenericMsg.svelte\";\n  import VoteMsg from \"./VoteMsg.svelte\";\n  import PrivateMsg from \"./PrivateMsg.svelte\";\n  import ContactMsg from \"./ContactMsg.svelte\";\n  import ChannelMsg from \"./ChannelMsg.svelte\";\n  import AboutMsg from \"./AboutMsg.svelte\";\n  import PubMsg from \"./PubMsg.svelte\";\n  import BlogMsg from \"./BlogMsg.svelte\";\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\n  import timestamp from \"../parts/timestamp.js\";\n  import { navigate } from \"../utils.js\";\n\n  export let msg;\n\n  let type;\n  let feed = msg.value.author;\n  let showRaw = false;\n  let rawContent = JSON.stringify(msg, null, 2);\n  let dropdownActive = false;\n\n  let messageTypes = {\n    \"*\": GenericMsg,\n    post: PostMsg,\n    vote: VoteMsg,\n    private: PrivateMsg,\n    contact: ContactMsg,\n    channel: ChannelMsg,\n    about: AboutMsg,\n    pub: PubMsg,\n    blog: BlogMsg\n  };\n\n  let selectedRenderer;\n\n  if (typeof msg.value.content === \"string\") {\n    type = \"private\";\n  } else {\n    type = msg.value.content.type;\n  }\n\n  if (messageTypes.hasOwnProperty(type)) {\n    selectedRenderer = messageTypes[type];\n  } else {\n    selectedRenderer = messageTypes[\"*\"];\n  }\n\n  let image = \"images/icon.png\";\n  let name = feed;\n\n  ssb.avatar(feed).then(data => {\n    if (data.image !== null) {\n      image = `http://localhost:8989/blobs/get/${data.image}`;\n    }\n    name = data.name;\n  });\n\n  const toggleRawMessage = () => {\n    showRaw = !showRaw;\n    dropdownActive = false;\n  };\n\n  const copyPermalink = () => {\n    navigator.clipboard\n      .writeText(`ssb:${msg.key}`)\n      .then(() => console.log(\"permalink copied\"))\n      .catch(err => console.error(\"can't copy permalink\", err));\n\n    dropdownActive = false;\n  };\n\n  const copyHash = () => {\n    navigator.clipboard\n      .writeText(`${msg.key}`)\n      .then(() => console.log(\"hash copied\"))\n      .catch(err => console.error(\"can't copy hash\", err));\n\n    dropdownActive = false;\n  };\n</script>\n\n<style>\n  .raw-content {\n    width: 50%;\n  }\n\n  .feed-display {\n    cursor: pointer;\n  }\n\n  .channel-display {\n    cursor: pointer;\n  }\n\n  .menu-right {\n    right: 0px;\n    left: unset;\n    min-width: 300px;\n  }\n</style>\n\n<div class=\"card m-2\">\n  <div class=\"card-header\">\n    <div class=\"float-left\">\n      <div class=\"card-title\">\n        <div\n          class=\"tile tile-centered feed-display\"\n          on:click={() => navigate('/profile', { feed })}>\n          <div class=\"tile-icon\">\n            <div class=\"example-tile-icon\">\n              <img src={image} class=\"avatar avatar-lg\" alt={feed} />\n            </div>\n          </div>\n          <div class=\"tile-content\">\n            <div class=\"tile-title\">{name}</div>\n            <small class=\"tile-subtitle text-gray\">\n               {timestamp(msg.value.timestamp)}\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"float-right\">\n\n      <span\n        class=\"text-gray channel-display\"\n        on:click={() => navigate('/channel', {\n            channel: msg.value.content.channel\n          })}>\n        {#if msg.value.content.channel}#{msg.value.content.channel}{/if}\n      </span>\n      <div class=\"dropdown\">\n        <span\n          class=\"btn btn-link dropdown-toggle\"\n          tabindex=\"0\"\n          class:active={dropdownActive}\n          on:click={() => (dropdownActive = !dropdownActive)}>\n          <i class=\"icon icon-more-vert\" />\n        </span>\n        <ul class=\"menu menu-right\">\n          <li class=\"menu-item\">\n\n            <a\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\"\n              target=\"_blank\">\n              <i class=\"icon icon-share\" />\n              Open in new tab\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyPermalink}>\n              <i class=\"icon icon-copy\" />\n              Copy permalink to clipboard\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyHash}>\n              <i class=\"icon icon-copy\" />\n              Copy message id to clipboard\n            </a>\n          </li>\n          <li class=\"divider\" data-content=\"FOR THE CURIOUS\"/>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={toggleRawMessage}>\n              <i class=\"icon icon-message\" />\n              {#if !showRaw}Show raw message{:else}Close raw message{/if}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  {#if !showRaw}\n    <svelte:component this={selectedRenderer} {msg} />\n  {:else}\n    <div class=\"card-body\">\n      <div class=\"columns\">\n        <div class=\"column col-9\">\n          <pre class=\"code\">\n            <code>{rawContent}</code>\n          </pre>\n        </div>\n        <div class=\"column col-3\">\n          <p>\n            This is a message of type\n            <em>{type}</em>\n            .\n          </p>\n          <p>\n            To learn more about it, go to\n            <a target=\"_blank\" href=\"/docs/index.html#/message_types/{type}\">\n              the documentation about messages with type {type}\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  export let msg;\n\n  let rawContent = JSON.stringify(msg, null, 2);\n</script>\n<style>\npre.code {\n    overflow: scroll;\n}\n</style>\n\n<div class=\"card-body\">\n  <pre class=\"code\">\n    <code> {rawContent} </code>\n  </pre>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2CE,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,KAAK,AACjB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACxC,OAAO,CAAE,IAAI,AACf,CAAC;AC2BD,aAAa,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,KAAK,CACX,SAAS,CAAE,KAAK,AAClB,CAAC;AC7FH,GAAG,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACpB,CAAC"
}