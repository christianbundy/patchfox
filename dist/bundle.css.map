{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Patchfox.svelte",
    "../src/Navigation.svelte",
    "../src/views/Compose.svelte",
    "../src/views/Channels.svelte",
    "../src/messageTypes/MessageRenderer.svelte",
    "../src/messageTypes/PostMsg.svelte",
    "../src/messageTypes/GenericMsg.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n  import {\n    connected,\n    route,\n    navigate,\n    currentView,\n    connect,\n    reconnect,\n    getPref,\n    routeLocation,\n    keepPinging \n  } from \"./utils.js\";\n  import Navigation from \"./Navigation.svelte\";\n\n  let useShortColumn = getPref(\"columnSize\", \"short\") == \"short\";\n\n  onMount(async () => {\n    try {\n      await connect();\n\n      keepPinging();\n    } catch (n) {\n      console.error(\"connect error\", n);\n      switch (n) {\n        case \"Can't connect to sbot\":\n          // need to be able to go to settings even though no connection is\n          // established.\n          if ($routeLocation !== \"/settings\") {\n            window.location = \"/docs/index.html#/troubleshooting/no-connection\";\n          }\n          break;\n        default:\n          navigate(\"/error\", { error: n });\n          break;\n      }\n    }\n  });\n\n  const popState = event => {\n    if (event.state !== null) {\n      console.dir(\"pop\", event.state);\n      let { location, data } = event.state;\n      route.set({ location, data });\n    }\n  };\n\n  const handleUncaughtException = event => {\n    console.error(\"Uncaught exception\", event);\n    navigate(\"/error\", { error: event.message });\n  };\n\n  const hashChange = event => {\n    console.dir(\"hash change\", event);\n  };\n</script>\n\n<style>\n  .reduced-line-length {\n    max-width: 840px;\n    margin: auto;\n  }\n</style>\n\n<svelte:window\n  on:popstate={popState}\n  on:error={handleUncaughtException}\n  on:hashchange={hashChange} />\n<div class=\"container bg-gray\">\n  <div class=\"columns\">\n    <div class=\"column\" class:reduced-line-length={useShortColumn}>\n      <Navigation />\n      <svelte:component this={$currentView} />\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import { connected, navigate, routeLocation } from \"./utils.js\";\n\n  let avatar = \"/images/icon.png\";\n\n  $: if ($connected) {\n    ssb.avatar(ssb.feed).then(data => {\n      avatar = `http://localhost:8989/blobs/get/${data.image}`;\n    });\n  }\n\n  const goSettings = ev => navigate(\"/settings\");\n  const goCompose = () => navigate(\"/compose\");\n  const goPublic = () => navigate(\"/public\");\n  const goChannels = () => navigate(\"/channels\");\n  const goMentions = () => navigate(\"/mentions\");\n\n  const openSidebar = async ev => {\n    let loc = window.location.href;\n    browser.sidebarAction.setPanel({ panel: loc });\n    browser.sidebarAction.open();\n    let tab = await browser.tabs.getCurrent();\n    await browser.tabs.remove(tab.id);\n  };\n\n  const closeSidebar = async ev => {\n    let loc = await browser.sidebarAction.getPanel({});\n    await browser.tabs.create({ url: loc });\n    await browser.sidebarAction.close();\n  };\n\n  const openMyProfile = ev => {\n    ev.stopPropagation();\n    ev.preventDefault();\n\n    if (ssb.feed) {\n      navigate(\"/profile\", { feed: ssb.feed });\n    }\n  };\n</script>\n\n<style>\n  .blocker {\n    height: 70px;\n    display: block;\n  }\n\n  .above {\n    z-index: 99999;\n    width: 100;\n    padding: 5px;\n    position: fixed;\n  }\n\n  .current {\n    border: none;\n    background: none;\n    border-bottom: solid 2px rgb(2, 146, 50);\n    outline: none;\n  }\n</style>\n\n<header class=\"navbar\">\n  <section class=\"navbar-section hide-sm\">\n    <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={openSidebar}>\n      <i class=\"icon icon-minus text-black\" />\n    </a>\n    <a href=\"#\" class=\"navbar-brand mr-2 p-1\" on:click={openMyProfile}>\n      <figure class=\"avatar avatar-lg\">\n        <img src={avatar} alt=\"L\" />\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\n      </figure>\n    </a>\n    <a\n      href=\"#/compose\"\n      class=\"btn btn-link\"\n      on:click|stopPropagation|preventDefault={goCompose}>\n      Compose\n    </a>\n    <a\n      href=\"#/public\"\n      class=\"btn btn-link\"\n      on:click|stopPropagation|preventDefault={goPublic}>\n      Public\n    </a>\n    <a\n      href=\"#/mentions\"\n      class=\"btn btn-link\"\n      on:click|stopPropagation|preventDefault={goMentions}>\n      Mentions\n    </a>\n    <a\n      href=\"#/channels\" \n      class=\"btn btn-link\"\n      on:click|stopPropagation|preventDefault={goChannels}>\n      Channels\n    </a>\n    <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>Settings</a>\n    <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\n  </section>\n  <section class=\"navbar-section show-sm bg-gray above\">\n    <button class=\"btn btn-link\" on:click={() => history.back()}>\n      <i class=\"icon icon-back\" />\n    </button>\n    <a href=\"...\" class=\"navbar-brand mr-2 p-1\">\n      <figure class=\"avatar\">\n        <img src={avatar} alt=\"L\" />\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\n      </figure>\n    </a>\n    <div class=\"dropdown float-right\">\n      <a\n        href=\"?\"\n        class=\"btn btn-link dropdown-toggle\"\n        tabindex=\"0\"\n        on:click|stopPropagation|preventDefault={() => ''}>\n        Menu\n        <i class=\"icon icon-caret\" />\n      </a>\n      <!-- menu component -->\n      <ul class=\"menu\">\n        <li class=\"menu-item\">\n          <a\n            href=\"#/compose\"\n            class=\"btn btn-link\"\n            on:click|stopPropagation|preventDefault={goCompose}>\n            New\n          </a>\n        </li>\n        <li class=\"menu-item\">\n          <a\n            href=\"#/public\"\n            class=\"btn btn-link\"\n            on:click|stopPropagation|preventDefault={goPublic}>\n            Public\n          </a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>\n            Settings\n          </a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\n        </li>\n        <li class=\"menu-item\">\n          <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={closeSidebar}>\n            Open as a Tab\n          </a>\n        </li>\n      </ul>\n    </div>\n  </section>\n  <div class=\"blocker show-sm\" />\n</header>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import drop from \"drag-and-drop-files\";\n  import { slide } from \"svelte/transition\";\n  import { navigate, routeParams, reconnect } from \"../utils.js\";\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\n\n  let showPreview = false;\n  let msg = false;\n  let error = false;\n  let posting = false;\n\n  let root = $routeParams.root;\n  let branch = $routeParams.branch;\n  let channel = $routeParams.channel || \"\";\n  let content = $routeParams.content || \"\";\n  let replyfeed = $routeParams.replyfeed || false;\n  let fork = $routeParams.fork;\n  let fileOnTop = false;\n  let pull = hermiebox.modules.pullStream;\n  let fileReader = hermiebox.modules.pullFileReader;\n  let sbot = hermiebox.sbot;\n\n  document.title = `Patchfox - compose`;\n\n  onMount(() => {\n    error = false;\n    msg = \"\";\n\n    // this code could be in some better/smarter place.\n    // e.dataTransfer.getData('url'); from images in the browser window\n\n    drop(document.getElementById(\"content\"), files => readFileAndAttach(files));\n  });\n\n  const readFileAndAttach = files => {\n    error = false;\n    msg = \"\";\n\n    if (files.length == 0) {\n      fileOnTop = false;\n      console.log(\"this is not a file\");\n      return false;\n    }\n\n    var first = files[0];\n    console.log(first);\n\n    if (!first.type.startsWith(\"image\")) {\n      error = true;\n      msg = `You can only drag & drop image, this file is a ${first.type}`;\n      return false;\n    }\n\n    if (first.size >= 5000000) {\n      error = true;\n      msg = `File too large: ${Math.floor(\n        first.size / 1048576,\n        2\n      )}mb when max size is 5mb`;\n      return false;\n    }\n\n    pull(\n      fileReader(first),\n      sbot.blobs.add(function(err, hash) {\n        // 'hash' is the hash-id of the blob\n        if (err) {\n          error = true;\n          msg = \"Couldn't attach file: \" + err;\n        } else {\n          content += ` ![${first.name}](${hash})`;\n        }\n        fileOnTop = false;\n      })\n    );\n  };\n\n  const post = async ev => {\n    ev.stopPropagation();\n    ev.preventDefault();\n\n    if (!posting) {\n      posting = true;\n\n      if (channel.startsWith(\"#\")) {\n        channel = channel.slice(1);\n      }\n\n      try {\n        msg = await ssb.newPost({ text: content, channel, root, branch, fork });\n        posting = false;\n        console.log(\"posted\", msg);\n        window.scrollTo(0, 0);\n      } catch (n) {\n        error = true;\n        msg = `Couldn't post your message: ${n}`;\n        window.scrollTo(0, 0);\n\n        if (msg.message == \"stream is closed\") {\n          msg += \". We lost connection to sbot. We'll try to restablish it...\";\n\n          reconnect()\n            .then(() => {\n              showPreview = false;\n              posting = false;\n              error = false;\n              msg = \"Connection to sbot reestablished. Try posting again\";\n            })\n            .catch(err => {\n              window.location.search = `?root=${encodeURIComponent(\n                root\n              )}&branch=${encodeURIComponent(\n                branch\n              )}&content=${encodeURIComponent(\n                content\n              )}&channel=${encodeURIComponent(channel)}`;\n              msg = `Sorry, couldn't reconnect to sbot:${err}. Try reloading the page. Your content has been saved to the URL`;\n            });\n        }\n      }\n    }\n  };\n\n  const preview = ev => {\n    showPreview = true;\n  };\n\n  const saveToURL = ev => {\n    window.location.search = `?root=${encodeURIComponent(\n      root\n    )}&branch=${encodeURIComponent(branch)}&content=${encodeURIComponent(\n      content\n    )}&channel=${encodeURIComponent(channel)}`;\n  };\n\n  const avatarClick = ev => {\n    let feed = ev.detail.feed;\n    let name = ev.detail.name;\n\n    if (content.length > 0) {\n      content += ` [${name}](${feed})`;\n    } else {\n      content = `[${name}](${feed})`;\n    }\n  };\n\n  const dragOver = ev => {\n    fileOnTop = true;\n  };\n\n  const dragLeave = ev => {\n    fileOnTop = false;\n  };\n\n  const attachFileTrigger = () => {\n    document.getElementById(\"fileInput\").click();\n  };\n\n  const attachFile = ev => {\n    const files = ev.target.files;\n    readFileAndAttach(files);\n  };\n</script>\n\n<style>\n  .file-on-top {\n    border: solid 2px rgb(26, 192, 11);\n  }\n\n  input[type=\"file\"] {\n    display: none;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns\">\n    <div class=\"column\">\n      {#if fork}\n        <div class=\"toast toast-warning\">You are forking: {fork}</div>\n      {/if}\n      {#if msg}\n        {#if error}\n          <div class=\"toast toast-error\">{msg}</div>\n        {:else}\n          <div class=\"toast toast-success\">\n            Your message has been posted. Do you want to\n            <a\n              target=\"_blank\"\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\">\n              Check it out?\n            </a>\n          </div>\n        {/if}\n      {/if}\n      {#if !showPreview}\n        <div class=\"form-group\" in:slide out:slide>\n          <label class=\"form-label\" for=\"channel\">Channel</label>\n          <input\n            class=\"form-input\"\n            type=\"text\"\n            id=\"channel\"\n            placeholder=\"channel\"\n            bind:value={channel} />\n\n          {#if branch}\n            <label class=\"form-label\" for=\"reply-to\">In reply to</label>\n            <input\n              class=\"form-input\"\n              type=\"text\"\n              id=\"reply-to\"\n              placeholder=\"in reply to\"\n              bind:value={branch} />\n          {/if}\n\n          {#if replyfeed}\n            <div class=\"mt-2\">\n              <span>\n                Click the avatar to add a link to the message:\n                <AvatarChip feed={replyfeed} on:avatarClick={avatarClick} />\n              </span>\n            </div>\n          {/if}\n          <label class=\"form-label\" for=\"content\">Message</label>\n          <textarea\n            class=\"form-input\"\n            id=\"content\"\n            placeholder=\"Type in your post\"\n            rows=\"10\"\n            on:dragover|preventDefault|stopPropagation={dragOver}\n            on:dragleave|preventDefault|stopPropagation={dragLeave}\n            class:file-on-top={fileOnTop}\n            bind:value={content} />\n          <br />\n          <input type=\"file\" on:input={attachFile} id=\"fileInput\" />\n          <button class=\"btn\" on:click={attachFileTrigger}>Attach File</button>\n          <button class=\"btn btn-primary float-right\" on:click={preview}>\n            Preview\n          </button>\n        </div>\n      {:else}\n        <div class=\"column col-md-12\">\n          <h2>Post preview</h2>\n          {#if channel || root || branch}\n            <blockquote>\n              {#if channel}\n                <p>\n                  <b>Channel:</b>\n                   {channel.startsWith('#') ? channel.slice(1) : channel}\n                </p>\n              {/if}\n              {#if root}\n                <p>\n                  <b>Root:</b>\n                   {root}\n                </p>\n              {/if}\n              {#if branch}\n                <p>\n                  <b>In Reply To:</b>\n                   {branch}\n                </p>\n              {/if}\n            </blockquote>\n          {/if}\n          {@html ssb.markdown(content)}\n\n          <div class=\"divider\" />\n          <div class=\"columns\">\n            <div class=\"column col-md-12 col-lg-10\">\n              <span class=\"label label-warning\">\n                This message will be public and can't be edited or deleted\n              </span>\n            </div>\n            <div class=\"column col-md-12 col-lg-2\">\n              <button class=\"btn\" on:click={() => (showPreview = false)}>\n                Go Back\n              </button>\n              <button\n                class=\"btn btn-primary\"\n                class:loading={posting}\n                on:click={post}>\n                Post\n              </button>\n            </div>\n          </div>\n        </div>\n      {/if}\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // NOTICE:\n  // I've removed this view from the navigation.\n  //\n  // it is too slow, it takes about 60 seconds to query.\n  //\n\n  import { navigate } from \"../utils.js\";\n\n  let activeChannels = [];\n  let subscribedChannels = [];\n\n  let loading = true;\n\n  let pull = hermiebox.modules.pullStream;\n  let sbot = hermiebox.sbot;\n\n  const loadSubscribedChannels = () => {\n    let query = {\n      $filter: {\n        value: {\n          author: sbot.id,\n          content: {\n            type: \"channel\"\n          }\n        }\n      },\n      $sort: [[\"value\", \"timestamp\"]]\n    };\n    pull(\n      sbot.query.read({\n        query: [query],\n        live: true,\n        reverse: true,\n        limit: 500\n      }),\n      //pull.filter(c => {\n      //  !subscribedChannels.some(sc => sc.channel == c.channel);\n      //}),\n      pull.drain(c => {\n        if (c.sync) {\n          console.log(\"finished loading\");\n          loading = false;\n        } else {\n          if (c.value.content.subscribed) {\n            subscribedChannels.push(c.value.content.channel);\n            subscribedChannels = subscribedChannels;\n          }\n        }\n      })\n    );\n  };\n\n  loadSubscribedChannels();\n</script>\n\n<style>\n  .channel {\n    cursor: pointer;\n  }\n</style>\n\n<h4>Subscribed Channels</h4>\n\n{#if subscribedChannels.length == 0}\n  <div class=\"loading\" />\n\n  <p>This is a complex query, it might take a while... Channels will appear as we find them</p>\n{:else}\n  {#each subscribedChannels as c}\n    <span\n      class=\"channel label label-secondary m-1\"\n      on:click={() => navigate('/channel', { channel: c })}>\n       #{c}\n    </span>\n  {/each}\n{/if}\n",
    "<script>\n  import PostMsg from \"./PostMsg.svelte\";\n  import GenericMsg from \"./GenericMsg.svelte\";\n  import VoteMsg from \"./VoteMsg.svelte\";\n  import PrivateMsg from \"./PrivateMsg.svelte\";\n  import ContactMsg from \"./ContactMsg.svelte\";\n  import ChannelMsg from \"./ChannelMsg.svelte\";\n  import AboutMsg from \"./AboutMsg.svelte\";\n  import PubMsg from \"./PubMsg.svelte\";\n  import BlogMsg from \"./BlogMsg.svelte\";\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\n  import timestamp from \"../parts/timestamp.js\";\n  import { navigate } from \"../utils.js\";\n\n  export let msg;\n\n  let type;\n  let feed = msg.value.author;\n  let showRaw = false;\n  let rawContent = JSON.stringify(msg, null, 2);\n  let dropdownActive = false;\n  let privateMsgForYou = false;\n\n  let messageTypes = {\n    \"*\": GenericMsg,\n    post: PostMsg,\n    vote: VoteMsg,\n    private: PrivateMsg,\n    contact: ContactMsg,\n    channel: ChannelMsg,\n    about: AboutMsg,\n    pub: PubMsg,\n    blog: BlogMsg\n  };\n\n  let selectedRenderer;\n\n  if (typeof msg.value.content === \"string\") {\n    type = \"private\";\n  } else {\n    type = msg.value.content.type;\n  }\n\n  if (msg.value.private) {\n    privateMsgForYou = true;\n  }\n\n  if (messageTypes.hasOwnProperty(type)) {\n    selectedRenderer = messageTypes[type];\n  } else {\n    selectedRenderer = messageTypes[\"*\"];\n  }\n\n  let image = \"images/icon.png\";\n  let name = feed;\n\n  ssb.avatar(feed).then(data => {\n    if (data.image !== null) {\n      image = `http://localhost:8989/blobs/get/${data.image}`;\n    }\n    name = data.name;\n  });\n\n  const toggleRawMessage = () => {\n    showRaw = !showRaw;\n    dropdownActive = false;\n  };\n\n  const copyPermalink = () => {\n    navigator.clipboard\n      .writeText(`ssb:${msg.key}`)\n      .then(() => console.log(\"permalink copied\"))\n      .catch(err => console.error(\"can't copy permalink\", err));\n\n    dropdownActive = false;\n  };\n\n  const copyHash = () => {\n    navigator.clipboard\n      .writeText(`${msg.key}`)\n      .then(() => console.log(\"hash copied\"))\n      .catch(err => console.error(\"can't copy hash\", err));\n\n    dropdownActive = false;\n  };\n\n  const goProfile = (ev) => {\n     if (ev.ctrlKey) {\n      window.open(`?feed=${encodeURIComponent(feed)}#/profile`);\n    } else {\n      navigate('/profile', { feed })\n    }\n  }\n</script>\n\n<style>\n  .raw-content {\n    width: 50%;\n  }\n\n  .feed-display {\n    cursor: pointer;\n  }\n\n  .channel-display {\n    cursor: pointer;\n  }\n\n  .menu-right {\n    right: 0px;\n    left: unset;\n    min-width: 300px;\n  }\n\n  .private {\n    border: solid 2px orange;\n  }\n</style>\n\n<div class=\"card m-2\" class:private={privateMsgForYou}>\n  <div class=\"card-header\">\n    <div class=\"float-left\">\n      <div class=\"card-title\">\n        <div\n          class=\"tile tile-centered feed-display\"\n          on:click={goProfile}>\n          <div class=\"tile-icon\">\n            <div class=\"example-tile-icon\">\n              <img src={image} class=\"avatar avatar-lg\" alt={feed} />\n            </div>\n          </div>\n          <div class=\"tile-content\">\n            <div class=\"tile-title\">{name}</div>\n            <small class=\"tile-subtitle text-gray\">\n               {timestamp(msg.value.timestamp)}\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n    {#if privateMsgForYou}\n    <span class=\"label\">PRIVATE</span>\n    {/if}\n    <div class=\"float-right\">\n      <span\n        class=\"text-gray channel-display\"\n        on:click={() => navigate('/channel', {\n            channel: msg.value.content.channel\n          })}>\n        {#if msg.value.content.channel}#{msg.value.content.channel}{/if}\n      </span>\n      <div class=\"dropdown\">\n        <span\n          class=\"btn btn-link dropdown-toggle\"\n          tabindex=\"0\"\n          class:active={dropdownActive}\n          on:click={() => (dropdownActive = !dropdownActive)}>\n          <i class=\"icon icon-more-vert\" />\n        </span>\n        <ul class=\"menu menu-right\">\n          <li class=\"menu-item\">\n\n            <a\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\"\n              target=\"_blank\">\n              <i class=\"icon icon-share\" />\n              Open in new tab\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyPermalink}>\n              <i class=\"icon icon-copy\" />\n              Copy permalink to clipboard\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyHash}>\n              <i class=\"icon icon-copy\" />\n              Copy message id to clipboard\n            </a>\n          </li>\n          <li class=\"divider\" data-content=\"FOR THE CURIOUS\" />\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={toggleRawMessage}>\n              <i class=\"icon icon-message\" />\n              {#if !showRaw}Show raw message{:else}Close raw message{/if}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  {#if !showRaw}\n    <svelte:component this={selectedRenderer} {msg} />\n  {:else}\n    <div class=\"card-body\">\n      <div class=\"columns\">\n        <div class=\"column col-9\">\n          <pre class=\"code\">\n            <code>{rawContent}</code>\n          </pre>\n        </div>\n        <div class=\"column col-3\">\n          <p>\n            This is a message of type\n            <em>{type}</em>\n            .\n          </p>\n          <p>\n            To learn more about it, go to\n            <a target=\"_blank\" href=\"/docs/index.html#/message_types/{type}\">\n              the documentation about messages with type {type}\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { navigate } from \"../utils.js\";\n\n  export let msg;\n\n  let content = ssb.markdown(msg.value.content.text);\n  let liked = false;\n\n  ssb.votes(msg.key).then(ms => {\n    ms.forEach(m => {\n      let author = m.value.author;\n      if (author === ssb.feed && m.value.content.vote.value === 1) {\n        liked = true;\n      }\n    });\n  });\n\n  const likeChanged = ev => {\n    let v = ev.target.checked;\n    if (v) {\n      ssb\n        .like(msg.key)\n        .then(() => console.log(\"liked\", msg.key))\n        .catch(() => (liked = false));\n    } else {\n      ssb\n        .unlike(msg.key)\n        .then(() => console.log(\"unliked\", msg.key))\n        .catch(() => (liked = true));\n    }\n  };\n\n  const reply = ev => {\n    let root = msg.value.content.root || msg.key;\n    let channel = msg.value.content.channel;\n    let replyfeed = msg.value.author;\n    navigate(\"/compose\", { root, branch: msg.key, channel, replyfeed });\n  };\n\n  const fork = ev => {\n    let originalRoot = msg.value.content.root || msg.key;\n    let channel = msg.value.content.channel;\n    let replyfeed = msg.value.author;\n    navigate(\"/compose\", { root: msg.key, branch: msg.key, fork: originalRoot, channel, replyfeed });\n  };\n\n  const goRoot = ev => {\n    let rootId = msg.value.content.root || msg.key;\n    navigate(\"/thread\", { thread: rootId });\n  };\n\n  const goBranch = ev => {\n    let branchId = msg.value.content.branch || msg.key;\n    navigate(\"/thread\", { thread: branchId });\n  };\n</script>\n\n<style>\n  div img.is-image-from-blob {\n    max-width: 90%;\n  }\n\n  .card-body {\n    overflow-wrap: break-word;\n  }\n</style>\n\n<div class=\"card-body\">\n  {@html content}\n</div>\n<div class=\"card-footer\">\n  <div class=\"columns col-gapless\">\n    <div class=\"column col-6\">\n      <label class=\"form-switch d-inline\">\n        <input type=\"checkbox\" on:change={likeChanged} checked={liked} />\n        <i class=\"form-icon\" />\n        Like\n      </label>\n      {#if msg.value.content.root}\n        <span>\n          <a\n            href=\"?thread={encodeURIComponent(msg.value.content.root)}#/thread\"\n            on:click|preventDefault={goRoot}>\n            (root)\n          </a>\n        </span>\n      {/if}\n      {#if msg.value.content.branch}\n        <span>\n          <a\n            href=\"?thread={encodeURIComponent(msg.value.content.branch)}#/thread\"\n            on:click|preventDefault={goBranch}>\n            (in reply to)\n          </a>\n        </span>\n      {/if}\n    </div>\n\n    <div class=\"column col-6 text-right\">\n      <button class=\"btn\" on:click={fork}>Fork</button>\n\n      <button class=\"btn\" on:click={reply}>Reply</button>\n    </div>\n  </div>\n\n</div>\n",
    "<script>\n  export let msg;\n\n  let rawContent = JSON.stringify(msg, null, 2);\n</script>\n<style>\npre.code {\n    overflow: scroll;\n}\n</style>\n\n<div class=\"card-body\">\n  <pre class=\"code\">\n    <code> {rawContent} </code>\n  </pre>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA0DE,oBAAoB,eAAC,CAAC,AACpB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,AACd,CAAC;ACnBD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,KAAK,AACjB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACxC,OAAO,CAAE,IAAI,AACf,CAAC;AC2GD,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,AACpC,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,cAAC,CAAC,AAClB,OAAO,CAAE,IAAI,AACf,CAAC;ACnHD,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,OAAO,AACjB,CAAC;ACyCD,aAAa,cAAC,CAAC,AACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,KAAK,CACX,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,MAAM,AAC1B,CAAC;ACtDD,UAAU,eAAC,CAAC,AACV,aAAa,CAAE,UAAU,AAC3B,CAAC;AC1DH,GAAG,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACpB,CAAC"
}