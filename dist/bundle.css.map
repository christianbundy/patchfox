{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\views\\Compose.svelte",
    "..\\src\\views\\Channels.svelte",
    "..\\src\\views\\Settings.svelte",
    "..\\src\\messageTypes\\MessageRenderer.svelte",
    "..\\src\\messageTypes\\PostMsg.svelte",
    "..\\src\\messageTypes\\GenericMsg.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import drop from \"drag-and-drop-files\";\r\n  import { slide } from \"svelte/transition\";\r\n  import { navigate, routeParams, reconnect, getPref } from \"../utils.js\";\r\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\r\n\r\n  let showPreview = false;\r\n  let msg = false;\r\n  let error = false;\r\n  let posting = false;\r\n\r\n  let root = $routeParams.root;\r\n  let branch = $routeParams.branch;\r\n  let channel = $routeParams.channel || \"\";\r\n  let content = $routeParams.content || \"\";\r\n  let replyfeed = $routeParams.replyfeed || false;\r\n  let fork = $routeParams.fork;\r\n  let fileOnTop = false;\r\n  let pull = hermiebox.modules.pullStream;\r\n  let fileReader = hermiebox.modules.pullFileReader;\r\n  let sbot = hermiebox.sbot;\r\n  let ipfsDaemonRunning = false;\r\n\r\n  document.title = `Patchfox - compose`;\r\n\r\n  onMount(() => {\r\n    error = false;\r\n    msg = \"\";\r\n\r\n    // this code could be in some better/smarter place.\r\n    // e.dataTransfer.getData('url'); from images in the browser window\r\n\r\n    drop(document.getElementById(\"content\"), files => readFileAndAttach(files));\r\n    checkIpfsDaemon();\r\n  });\r\n\r\n  const checkIpfsDaemon = () => {\r\n    let port = getPref(\"ipfsPort\", 5001);\r\n    fetch(`http://127.0.0.1:${port}/api/v0/config/show`).then(data => {\r\n      ipfsDaemonRunning = true;\r\n    });\r\n  };\r\n\r\n  const readFileAndAttach = files => {\r\n    error = false;\r\n    msg = \"\";\r\n\r\n    if (files.length == 0) {\r\n      fileOnTop = false;\r\n      console.log(\"this is not a file\");\r\n      return false;\r\n    }\r\n\r\n    var first = files[0];\r\n    console.log(first);\r\n\r\n    if (!first.type.startsWith(\"image\")) {\r\n      error = true;\r\n      msg = `You can only drag & drop image, this file is a ${first.type}`;\r\n      return false;\r\n    }\r\n\r\n    if (first.size >= 5000000) {\r\n      error = true;\r\n      msg = `File too large: ${Math.floor(\r\n        first.size / 1048576,\r\n        2\r\n      )}mb when max size is 5mb`;\r\n      return false;\r\n    }\r\n\r\n    pull(\r\n      fileReader(first),\r\n      sbot.blobs.add(function(err, hash) {\r\n        // 'hash' is the hash-id of the blob\r\n        if (err) {\r\n          error = true;\r\n          msg = \"Couldn't attach file: \" + err;\r\n        } else {\r\n          content += ` ![${first.name}](${hash})`;\r\n        }\r\n        fileOnTop = false;\r\n      })\r\n    );\r\n  };\r\n\r\n  const post = async ev => {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n\r\n    if (!posting) {\r\n      posting = true;\r\n\r\n      if (channel.startsWith(\"#\")) {\r\n        channel = channel.slice(1);\r\n      }\r\n\r\n      try {\r\n        msg = await ssb.newPost({ text: content, channel, root, branch, fork });\r\n        posting = false;\r\n        console.log(\"posted\", msg);\r\n        window.scrollTo(0, 0);\r\n      } catch (n) {\r\n        error = true;\r\n        msg = `Couldn't post your message: ${n}`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (msg.message == \"stream is closed\") {\r\n          msg += \". We lost connection to sbot. We'll try to restablish it...\";\r\n\r\n          reconnect()\r\n            .then(() => {\r\n              showPreview = false;\r\n              posting = false;\r\n              error = false;\r\n              msg = \"Connection to sbot reestablished. Try posting again\";\r\n            })\r\n            .catch(err => {\r\n              window.location.search = `?root=${encodeURIComponent(\r\n                root\r\n              )}&branch=${encodeURIComponent(\r\n                branch\r\n              )}&content=${encodeURIComponent(\r\n                content\r\n              )}&channel=${encodeURIComponent(channel)}`;\r\n              msg = `Sorry, couldn't reconnect to sbot:${err}. Try reloading the page. Your content has been saved to the URL`;\r\n            });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const preview = ev => {\r\n    showPreview = true;\r\n  };\r\n\r\n  const saveToURL = ev => {\r\n    window.location.search = `?root=${encodeURIComponent(\r\n      root\r\n    )}&branch=${encodeURIComponent(branch)}&content=${encodeURIComponent(\r\n      content\r\n    )}&channel=${encodeURIComponent(channel)}`;\r\n  };\r\n\r\n  const avatarClick = ev => {\r\n    let feed = ev.detail.feed;\r\n    let name = ev.detail.name;\r\n\r\n    if (content.length > 0) {\r\n      content += ` [${name}](${feed})`;\r\n    } else {\r\n      content = `[${name}](${feed})`;\r\n    }\r\n  };\r\n\r\n  const dragOver = ev => {\r\n    fileOnTop = true;\r\n  };\r\n\r\n  const dragLeave = ev => {\r\n    fileOnTop = false;\r\n  };\r\n\r\n  const attachFileTrigger = () => {\r\n    document.getElementById(\"fileInput\").click();\r\n  };\r\n\r\n  const attachFileIPFSTrigger = () => {\r\n    document.getElementById(\"fileInputIPFS\").click();\r\n  };\r\n\r\n  const attachFile = ev => {\r\n    const files = ev.target.files;\r\n    readFileAndAttach(files);\r\n  };\r\n\r\n  const attachFileIPFS = ev => {\r\n    const files = ev.target.files;\r\n    readFileAndAttachIPFS(files);\r\n  };\r\n\r\n  const readFileAndAttachIPFS = async files => {\r\n    error = false;\r\n    msg = \"\";\r\n\r\n    var ipfs = window.IpfsHttpClient('127.0.0.1', '5001')\r\n    const results = await ipfs.add(files[0])\r\n\r\n    console.log(\"added via IPFS\", results)\r\n    content += ` [${results[0].path}](ipfs://${results[0].hash})`;\r\n\r\n   \r\n  };\r\n</script>\r\n\r\n<style>\r\n  .file-on-top {\r\n    border: solid 2px rgb(26, 192, 11);\r\n  }\r\n\r\n  input[type=\"file\"] {\r\n    display: none;\r\n  }\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <div class=\"columns\">\r\n    <div class=\"column\">\r\n      {#if fork}\r\n        <div class=\"toast toast-warning\">You are forking: {fork}</div>\r\n      {/if}\r\n      {#if msg}\r\n        {#if error}\r\n          <div class=\"toast toast-error\">{msg}</div>\r\n        {:else}\r\n          <div class=\"toast toast-success\">\r\n            Your message has been posted. Do you want to\r\n            <a\r\n              target=\"_blank\"\r\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\">\r\n              Check it out?\r\n            </a>\r\n          </div>\r\n        {/if}\r\n      {/if}\r\n      {#if !showPreview}\r\n        <div class=\"form-group\" in:slide out:slide>\r\n          <label class=\"form-label\" for=\"channel\">Channel</label>\r\n          <input\r\n            class=\"form-input\"\r\n            type=\"text\"\r\n            id=\"channel\"\r\n            placeholder=\"channel\"\r\n            bind:value={channel} />\r\n\r\n          {#if branch}\r\n            <label class=\"form-label\" for=\"reply-to\">In reply to</label>\r\n            <input\r\n              class=\"form-input\"\r\n              type=\"text\"\r\n              id=\"reply-to\"\r\n              placeholder=\"in reply to\"\r\n              bind:value={branch} />\r\n          {/if}\r\n\r\n          {#if replyfeed}\r\n            <div class=\"mt-2\">\r\n              <span>\r\n                Click the avatar to add a link to the message:\r\n                <AvatarChip feed={replyfeed} on:avatarClick={avatarClick} />\r\n              </span>\r\n            </div>\r\n          {/if}\r\n          <label class=\"form-label\" for=\"content\">Message</label>\r\n          <textarea\r\n            class=\"form-input\"\r\n            id=\"content\"\r\n            placeholder=\"Type in your post\"\r\n            rows=\"10\"\r\n            on:dragover|preventDefault|stopPropagation={dragOver}\r\n            on:dragleave|preventDefault|stopPropagation={dragLeave}\r\n            class:file-on-top={fileOnTop}\r\n            bind:value={content} />\r\n          <br />\r\n          <input type=\"file\" on:input={attachFile} id=\"fileInput\" />\r\n          <button class=\"btn\" on:click={attachFileTrigger}>Attach File</button>\r\n          {#if ipfsDaemonRunning}\r\n            <input type=\"file\" on:input={attachFileIPFS} id=\"fileInputIPFS\" />\r\n            <button class=\"btn\" on:click={attachFileIPFSTrigger}>\r\n              Attach File using IPFS\r\n            </button>\r\n          {/if}\r\n          <button class=\"btn btn-primary float-right\" on:click={preview}>\r\n            Preview\r\n          </button>\r\n        </div>\r\n      {:else}\r\n        <div class=\"column col-md-12\">\r\n          <h2>Post preview</h2>\r\n          {#if channel || root || branch}\r\n            <blockquote>\r\n              {#if channel}\r\n                <p>\r\n                  <b>Channel:</b>\r\n                   {channel.startsWith('#') ? channel.slice(1) : channel}\r\n                </p>\r\n              {/if}\r\n              {#if root}\r\n                <p>\r\n                  <b>Root:</b>\r\n                   {root}\r\n                </p>\r\n              {/if}\r\n              {#if branch}\r\n                <p>\r\n                  <b>In Reply To:</b>\r\n                   {branch}\r\n                </p>\r\n              {/if}\r\n            </blockquote>\r\n          {/if}\r\n          {@html ssb.markdown(content)}\r\n\r\n          <div class=\"divider\" />\r\n          <div class=\"columns\">\r\n            <div class=\"column col-md-12 col-lg-10\">\r\n              <span class=\"label label-warning\">\r\n                This message will be public and can't be edited or deleted\r\n              </span>\r\n            </div>\r\n            <div class=\"column col-md-12 col-lg-2\">\r\n              <button class=\"btn\" on:click={() => (showPreview = false)}>\r\n                Go Back\r\n              </button>\r\n              <button\r\n                class=\"btn btn-primary\"\r\n                class:loading={posting}\r\n                on:click={post}>\r\n                Post\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  // NOTICE:\r\n  // I've removed this view from the navigation.\r\n  //\r\n  // it is too slow, it takes about 60 seconds to query.\r\n  //\r\n\r\n  import { navigate } from \"../utils.js\";\r\n\r\n  let activeChannels = [];\r\n  let subscribedChannels = [];\r\n\r\n  let loading = true;\r\n\r\n  let pull = hermiebox.modules.pullStream;\r\n  let sbot = hermiebox.sbot;\r\n\r\n  const loadSubscribedChannels = () => {\r\n    let query = {\r\n      $filter: {\r\n        value: {\r\n          author: sbot.id,\r\n          content: {\r\n            type: \"channel\"\r\n          }\r\n        }\r\n      },\r\n      $sort: [[\"value\", \"timestamp\"]]\r\n    };\r\n    pull(\r\n      sbot.query.read({\r\n        query: [query],\r\n        live: true,\r\n        reverse: true,\r\n        limit: 500\r\n      }),\r\n      //pull.filter(c => {\r\n      //  !subscribedChannels.some(sc => sc.channel == c.channel);\r\n      //}),\r\n      pull.drain(c => {\r\n        if (c.sync) {\r\n          console.log(\"finished loading\");\r\n          loading = false;\r\n        } else {\r\n          if (c.value.content.subscribed) {\r\n            subscribedChannels.push(c.value.content.channel);\r\n            subscribedChannels = subscribedChannels;\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  loadSubscribedChannels();\r\n</script>\r\n\r\n<style>\r\n  .channel {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n\r\n<h4>Subscribed Channels</h4>\r\n\r\n{#if subscribedChannels.length == 0}\r\n  <div class=\"loading\" />\r\n\r\n  <p>This is a complex query, it might take a while... Channels will appear as we find them</p>\r\n{:else}\r\n  {#each subscribedChannels as c}\r\n    <span\r\n      class=\"channel label label-secondary m-1\"\r\n      on:click={() => navigate('/channel', { channel: c })}>\r\n       #{c}\r\n    </span>\r\n  {/each}\r\n{/if}\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import {\r\n    getPref,\r\n    setPref,\r\n    setConnectionConfiguration,\r\n    navigate\r\n  } from \"../utils.js\";\r\n  import { getFilters, addFilter, deleteFilter } from \"../abusePrevention.js\";\r\n \r\n  let keys = {};\r\n  let remote = \"\";\r\n  let limit = getPref(\"limit\", 10);\r\n  let columnSize = getPref(\"columnSize\", \"short\");\r\n\r\n  document.title = \"Patchfox - Settings\";\r\n\r\n  // message type filters\r\n  let showTypeUnknown = getPref(\"showTypeUnknown\", false);\r\n  let showTypeAbout = getPref(\"showTypeAbout\", true);\r\n  let showTypeBlog = getPref(\"showTypeBlog\", true);\r\n  let showTypeChannel = getPref(\"showTypeChannel\", true);\r\n  let showTypeContact = getPref(\"showTypeContact\", true);\r\n  let showTypePost = getPref(\"showTypePost\", true);\r\n  let showTypePrivate = getPref(\"showTypePrivate\", true);\r\n  let showTypePub = getPref(\"showTypePub\", true);\r\n  let showTypeVote = getPref(\"showTypeVote\", true);\r\n\r\n  // Abuse Prevention - filters\r\n  let currentFilters = getFilters();\r\n  let filterFeed = \"\";\r\n  let filterChannel = \"\";\r\n  let filterKeywords = \"\";\r\n  let filterExpiry = \"\";\r\n  let filterAction = \"\";\r\n\r\n  const saveConfiguration = ev => {\r\n    setConnectionConfiguration({ remote, keys: JSON.parse(keys), manifest });\r\n    navigate(\"/public\");\r\n    location.reload();\r\n  };\r\n\r\n  const selectedFile = ev => {\r\n    const secretFile = ev.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = function(evt) {\r\n      console.log(evt.target.result);\r\n      const contents = evt.target.result;\r\n      let secret = contents.split(\"\\n\").filter(function(line) {\r\n        return line.indexOf(\"#\") != 0;\r\n      });\r\n      secret = JSON.parse(secret.join(\"\\n\"));\r\n      remote = `ws://localhost:8989~shs:${secret.id.slice(\r\n        0,\r\n        secret.id.indexOf(\"=\") + 1\r\n      )}`;\r\n      updateUI({ keys: secret, remote });\r\n    };\r\n    reader.readAsText(secretFile);\r\n  };\r\n\r\n  const updateUI = savedData => {\r\n    console.log(\"saved data from settings\", savedData);\r\n    remote = savedData.remote || \"\";\r\n    if (savedData.keys) {\r\n      keys = JSON.stringify(savedData.keys, null, 2);\r\n    } else {\r\n      keys = \"\";\r\n    }\r\n  };\r\n\r\n  const onError = error => {\r\n    console.error(\"error on settings\", error);\r\n  };\r\n\r\n  const gettingStoredSettings = browser.storage.local\r\n    .get()\r\n    .then(updateUI, onError);\r\n\r\n  const addNewFilter = () => {\r\n    let keywords = filterKeywords\r\n      .split(\",\")\r\n      .map(v => v.trim())\r\n      .filter(v => v.length !== 0);\r\n\r\n    let filter = {};\r\n    filter.action = filterAction.length !== 0 ? filterAction : false;\r\n    filter.feed = filterFeed.length !== 0 ? filterFeed : false;\r\n    filter.channel = filterChannel.length !== 0 ? filterChannel : false;\r\n    filter.keywords = keywords;\r\n    filter.expires = filterExpiry.length !== 0 ? filterExpiry : false;\r\n\r\n    if (filter.channel && filter.channel.startsWith(\"#\")) {\r\n      filter.channel = filter.channel.slice(1);\r\n    }\r\n\r\n    if (\r\n      filter.action &&\r\n      (filter.feed || filter.channel || filter.keywords.length > 0)\r\n    ) {\r\n      addFilter(filter);\r\n\r\n      currentFilters = getFilters();\r\n\r\n      console.dir(\"filters\", currentFilters);\r\n\r\n      filterFeed = \"\";\r\n      filterChannel = \"\";\r\n      filterKeywords = \"\";\r\n      filterExpiry = \"\";\r\n      filterAction = \"\";\r\n    } else {\r\n      alert(\"Fill at least filter action and one of feed, channel or keywords\");\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .filter {\r\n    height: 300px;\r\n    margin-bottom: 0.4rem;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .feed {\r\n    max-width: 100%;\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n\r\n<h1>Settings</h1>\r\n<p>\r\n  Settings changes are saved as you make them except for identity and connection\r\n  changes, those require a full page reload and thus you need to press a save\r\n  button. The reason behind this is that Patchfox needs to disconnect and\r\n  reconnect to the\r\n  <i>ssb-server</i>\r\n  using the new info.\r\n</p>\r\n<p>\r\n  <b>\r\n    You can't use Patchfox until you fill your\r\n    <i>Connection & Identity</i>\r\n    information.\r\n    <a\r\n      href=\"/docs/index.html#/troubleshooting/no-configuration\"\r\n      target=\"_blank\">\r\n      If you want more help regarding connection and configuration click here\r\n    </a>\r\n    .\r\n  </b>\r\n</p>\r\n\r\n<h4>Connection & Identity</h4>\r\n\r\n<form class=\"form-group\">\r\n  <label class=\"form-label\" for=\"secret-file\">\r\n    Patchfox can infer the values for both\r\n    <i>remote</i>\r\n    and\r\n    <i>secret</i>\r\n    from your\r\n    <code>~/.ssb/secret</code>\r\n    file. You can use the button below to browse for it.\r\n  </label>\r\n  <input\r\n    type=\"file\"\r\n    class=\"form-input\"\r\n    id=\"secret-file\"\r\n    on:change={selectedFile} />\r\n  <label class=\"form-label\" for=\"remote\">Remote</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"text\"\r\n    id=\"remote\"\r\n    placeholder=\"remote\"\r\n    bind:value={remote} />\r\n\r\n  <label class=\"form-label\" for=\"secret\">Secret</label>\r\n  <textarea\r\n    class=\"form-input\"\r\n    id=\"secret\"\r\n    placeholder=\"Your secret\"\r\n    rows=\"8\"\r\n    bind:value={keys} />\r\n  <br />\r\n  <button class=\"btn btn-primary float-right\" on:click={saveConfiguration}>\r\n    Save Identity & Remote\r\n  </button>\r\n  <p>Saving identity and remote will cause a full page refresh.</p>\r\n</form>\r\n\r\n<h4>Vieweing Experience</h4>\r\n<form class=\"form-group\">\r\n  <label class=\"form-label\" for=\"limit\">Messages per page</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"number\"\r\n    bind:value={limit}\r\n    on:change={() => setPref('limit', limit)} />\r\n\r\n  <br />\r\n  <span>\r\n    Which message types you want to see?\r\n    <a target=\"_blank\" href=\"/docs/index.html#/message_types/\">\r\n      Click here for more information about\r\n      <i>Message Types</i>\r\n    </a>\r\n  </span>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeAbout}\r\n      on:change={ev => {\r\n        setPref('showTypeAbout', showTypeAbout);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>About</b>\r\n    (aka people setting avatars and descriptions; gatherings)\r\n  </label>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeBlog}\r\n      on:change={ev => {\r\n        setPref('showTypeBlog', showTypeBlog);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Blog</b>\r\n    (Longform text posts)\r\n  </label>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeChannel}\r\n      on:change={ev => {\r\n        setPref('showTypeChannel', showTypeChannel);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Channel</b>\r\n    (People subscribing to channels)\r\n  </label>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeContact}\r\n      on:change={ev => {\r\n        setPref('showTypeContact', showTypeContact);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Contact</b>\r\n    (People following each other)\r\n  </label>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypePost}\r\n      on:change={ev => {\r\n        setPref('showTypePost', showTypePost);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Posts</b>\r\n    (Common content post, leave this on or it is not that fun)\r\n  </label>\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypePub}\r\n      on:change={ev => {\r\n        setPref('showTypePub', showTypePub);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Pub</b>\r\n    (Pub servers announcements)\r\n  </label>\r\n\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypePrivate}\r\n      on:change={ev => {\r\n        setPref('showTypePrivate', showTypePrivate);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Private</b>\r\n    (Private messages; You won't be able to read them, but you'll see their\r\n    encrypted content passing by)\r\n  </label>\r\n\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeVote}\r\n      on:change={ev => {\r\n        setPref('showTypeVote', showTypeVote);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Vote</b>\r\n    (People liking/digging stuff)\r\n  </label>\r\n  <div class=\"divider\" />\r\n  <label class=\"form-switch\">\r\n    <input\r\n      type=\"checkbox\"\r\n      bind:checked={showTypeUnknown}\r\n      on:change={ev => {\r\n        setPref('showTypeUnknown', showTypeUnknown);\r\n      }} />\r\n    <i class=\"form-icon\" />\r\n    <b>Unknown</b>\r\n    (Show messages Patchfox doesn't understand as their raw content)\r\n  </label>\r\n  <br />\r\n  <label class=\"form-label\">\r\n    Feed column size. There is research that says that a short column size makes\r\n    for a more pleasant reading experience, still some users prefer to use the\r\n    full screen space. Your choice is between reading through long text lines or\r\n    short ones.\r\n  </label>\r\n  <label class=\"form-radio\">\r\n    <input\r\n      type=\"radio\"\r\n      name=\"column-size\"\r\n      bind:group={columnSize}\r\n      on:change={() => setPref('columnSize', columnSize)}\r\n      value=\"short\" />\r\n    <i class=\"form-icon\" />\r\n    Short column\r\n  </label>\r\n  <label class=\"form-radio\">\r\n    <input\r\n      type=\"radio\"\r\n      name=\"column-size\"\r\n      bind:group={columnSize}\r\n      on:change={() => setPref('columnSize', columnSize)}\r\n      value=\"long\" />\r\n    <i class=\"form-icon\" />\r\n    Long column\r\n  </label>\r\n</form>\r\n<h4>Abuse Prevention</h4>\r\n<p>\r\n  Use the features from this section to tailor your Patchfox experience to suit\r\n  your needs.\r\n</p>\r\n<h5>Filters</h5>\r\n<p>\r\n  Use filters to hide messages and blur images. Use any combination of channel,\r\n  feeds and keywords (separated by commas) to create your triggers and make SSB\r\n  the platform you want. Be aware that these filters are saved to your browser,\r\n  they are not shared on the feed, they don't affect gossiping, they only affect\r\n  the displaying of messages and images in Patchfox itself. If you create a\r\n  filter and open a different client, they won't be working there. If you want\r\n  to learn more about\r\n  <a href=\"/docs/index.html#/features/filter\">\r\n    filters, click here to go to the documentation.\r\n  </a>\r\n  You can create as many filters as you want.\r\n</p>\r\n<div class=\"container\">\r\n  <div class=\"columns\">\r\n    {#each currentFilters as filter}\r\n      <div class=\"column col-6\">\r\n        <div class=\"card filter\">\r\n          <div class=\"card-header\">\r\n            <div class=\"card-title h5\">{filter.action}</div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <ul>\r\n              {#if filter.feed}\r\n                <li>From <a href=\"?feed={filter.feed}#/profile\" target=\"_blank\" class=\"feed\">{filter.feed}</a></li>\r\n              {/if}\r\n              {#if filter.channel}\r\n                <li>On channel <a href=\"?channel={filter.feed}#/channel\" target=\"_blank\" class=\"feed\">#{filter.channel}</a></li>\r\n              {/if}\r\n              {#if filter.keywords.length > 0}\r\n                <i>\r\n                  <li>Containing: {filter.keywords.join(', ')}</li>\r\n                </i>\r\n              {/if}\r\n              {#if filter.expires}\r\n                <li>Expiring in {filter.expires}</li>\r\n              {/if}\r\n            </ul>\r\n          </div>\r\n          <div class=\"card-footer\">\r\n            <button\r\n              class=\"btn\"\r\n              aria-label=\"Delete\"\r\n              on:click={() => {\r\n                deleteFilter(filter);\r\n                currentFilters = getFilters();\r\n              }}>\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    {:else}\r\n      <div class=\"column col-12\">\r\n        <p class=\"label\">You don't have any filter yet.</p>\r\n      </div>\r\n    {/each}\r\n  </div>\r\n</div>\r\n<h5>New Filter</h5>\r\n<form-group>\r\n  <label class=\"form-radio\">\r\n    <input\r\n      type=\"radio\"\r\n      name=\"filter-action\"\r\n      bind:group={filterAction}\r\n      value=\"hide\" />\r\n    <i class=\"form-icon\" />\r\n    Hide Message\r\n  </label>\r\n  <label class=\"form-radio\">\r\n    <input\r\n      type=\"radio\"\r\n      name=\"filter-action\"\r\n      bind:group={filterAction}\r\n      value=\"blur\" />\r\n    <i class=\"form-icon\" />\r\n    Blur Images\r\n  </label>\r\n  <label class=\"form-label\" for=\"remote\">Channel</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"text\"\r\n    placeholder=\"Channel\"\r\n    bind:value={filterChannel} />\r\n  <label class=\"form-label\" for=\"remote\">Feed</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"text\"\r\n    placeholder=\"Feed\"\r\n    bind:value={filterFeed} />\r\n  <label class=\"form-label\" for=\"remote\">Keywords</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"text\"\r\n    placeholder=\"Keywords separated by commas\"\r\n    bind:value={filterKeywords} />\r\n  <label class=\"form-label\" for=\"remote\">Expiration Date</label>\r\n  <input\r\n    class=\"form-input\"\r\n    type=\"date\"\r\n    placeholder=\"When should this filter expiry\"\r\n    bind:value={filterExpiry} />\r\n</form-group>\r\n<br />\r\n<button class=\"btn btn-primary\" on:click={addNewFilter}>Add Filter</button>\r\n<br />\r\n<br />\r\n",
    "<script>\n  import PostMsg from \"./PostMsg.svelte\";\n  import GenericMsg from \"./GenericMsg.svelte\";\n  import VoteMsg from \"./VoteMsg.svelte\";\n  import PrivateMsg from \"./PrivateMsg.svelte\";\n  import ContactMsg from \"./ContactMsg.svelte\";\n  import ChannelMsg from \"./ChannelMsg.svelte\";\n  import AboutMsg from \"./AboutMsg.svelte\";\n  import PubMsg from \"./PubMsg.svelte\";\n  import BlogMsg from \"./BlogMsg.svelte\";\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\n  import timestamp from \"../parts/timestamp.js\";\n  import { navigate } from \"../utils.js\";\n  import { isMessageBlured } from \"../abusePrevention.js\";\n\n  export let msg;\n\n  let type;\n  let feed = msg.value.author;\n  let showRaw = false;\n  let rawContent = JSON.stringify(msg, null, 2);\n  let dropdownActive = false;\n  let privateMsgForYou = false;\n\n  let messageTypes = {\n    \"*\": GenericMsg,\n    post: PostMsg,\n    vote: VoteMsg,\n    private: PrivateMsg,\n    contact: ContactMsg,\n    channel: ChannelMsg,\n    about: AboutMsg,\n    pub: PubMsg,\n    blog: BlogMsg\n  };\n\n  let selectedRenderer;\n\n  if (typeof msg.value.content === \"string\") {\n    type = \"private\";\n  } else {\n    type = msg.value.content.type;\n  }\n\n  if (msg.value.private) {\n    privateMsgForYou = true;\n  }\n\n  if (messageTypes.hasOwnProperty(type)) {\n    selectedRenderer = messageTypes[type];\n  } else {\n    selectedRenderer = messageTypes[\"*\"];\n  }\n\n  let image = \"images/icon.png\";\n  let name = feed;\n  let blured = isMessageBlured(msg);\n\n  ssb.avatar(feed).then(data => {\n    if (data.image !== null) {\n      image = `http://localhost:8989/blobs/get/${data.image}`;\n    }\n    name = data.name;\n  });\n\n  const toggleRawMessage = () => {\n    showRaw = !showRaw;\n    dropdownActive = false;\n  };\n\n  const copyPermalink = () => {\n    navigator.clipboard\n      .writeText(`ssb:${msg.key}`)\n      .then(() => console.log(\"permalink copied\"))\n      .catch(err => console.error(\"can't copy permalink\", err));\n\n    dropdownActive = false;\n  };\n\n  const copyHash = () => {\n    navigator.clipboard\n      .writeText(`${msg.key}`)\n      .then(() => console.log(\"hash copied\"))\n      .catch(err => console.error(\"can't copy hash\", err));\n\n    dropdownActive = false;\n  };\n\n  const goProfile = ev => {\n    if (ev.ctrlKey) {\n      window.open(`?feed=${encodeURIComponent(feed)}#/profile`);\n    } else {\n      navigate(\"/profile\", { feed });\n    }\n  };\n</script>\n\n<style>\n  .blured img {\n    filter: blur(20px) !important;\n  }\n\n  .blured {\n    border: solid 2px red;\n  }\n  .raw-content {\n    width: 50%;\n  }\n\n  .feed-display {\n    cursor: pointer;\n  }\n\n  .channel-display {\n    cursor: pointer;\n  }\n\n  .menu-right {\n    right: 0px;\n    left: unset;\n    min-width: 300px;\n  }\n\n  .private {\n    border: solid 2px orange;\n  }\n</style>\n\n<div class=\"card m-2\" class:private={privateMsgForYou} class:blured>\n  <div class=\"card-header\">\n    <div class=\"float-left\">\n      <div class=\"card-title\">\n        <div class=\"tile tile-centered feed-display\" on:click={goProfile}>\n          <div class=\"tile-icon\">\n            <div class=\"example-tile-icon\">\n              <img src={image} class=\"avatar avatar-lg\" alt={feed} />\n            </div>\n          </div>\n          <div class=\"tile-content\">\n            <div class=\"tile-title\">{name}</div>\n            <small class=\"tile-subtitle text-gray\">\n               {timestamp(msg.value.timestamp)}\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n    {#if privateMsgForYou}\n      <span class=\"label\">PRIVATE</span>\n    {/if}\n    <div class=\"float-right\">\n      <span\n        class=\"text-gray channel-display\"\n        on:click={() => navigate('/channel', {\n            channel: msg.value.content.channel\n          })}>\n        {#if msg.value.content.channel}#{msg.value.content.channel}{/if}\n      </span>\n      <div class=\"dropdown\">\n        <span\n          class=\"btn btn-link dropdown-toggle\"\n          tabindex=\"0\"\n          class:active={dropdownActive}\n          on:click={() => (dropdownActive = !dropdownActive)}>\n          <i class=\"icon icon-more-vert\" />\n        </span>\n        <ul class=\"menu menu-right\">\n          <li class=\"menu-item\">\n\n            <a\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\"\n              target=\"_blank\">\n              <i class=\"icon icon-share\" />\n              Open in new tab\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyPermalink}>\n              <i class=\"icon icon-copy\" />\n              Copy permalink to clipboard\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyHash}>\n              <i class=\"icon icon-copy\" />\n              Copy message id to clipboard\n            </a>\n          </li>\n          <li class=\"divider\" data-content=\"FOR THE CURIOUS\" />\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={toggleRawMessage}>\n              <i class=\"icon icon-message\" />\n              {#if !showRaw}Show raw message{:else}Close raw message{/if}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  {#if !showRaw}\n    <svelte:component this={selectedRenderer} {msg} />\n  {:else}\n    <div class=\"card-body\">\n      <div class=\"columns\">\n        <div class=\"column col-9\">\n          <pre class=\"code\">\n            <code>{rawContent}</code>\n          </pre>\n        </div>\n        <div class=\"column col-3\">\n          <p>\n            This is a message of type\n            <em>{type}</em>\n            .\n          </p>\n          <p>\n            To learn more about it, go to\n            <a target=\"_blank\" href=\"/docs/index.html#/message_types/{type}\">\n              the documentation about messages with type {type}\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script>\r\n  import { navigate } from \"../utils.js\";\r\n\r\n  export let msg;\r\n\r\n  let content = ssb.markdown(msg.value.content.text);\r\n  let liked = false;\r\n  let hasContentWarning = msg.value.content.contentWarning || false;\r\n  let showContentWarning = true;\r\n\r\n  ssb.votes(msg.key).then(ms => {\r\n    ms.forEach(m => {\r\n      let author = m.value.author;\r\n      if (author === ssb.feed && m.value.content.vote.value === 1) {\r\n        liked = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  const likeChanged = ev => {\r\n    let v = ev.target.checked;\r\n    if (v) {\r\n      ssb\r\n        .like(msg.key)\r\n        .then(() => console.log(\"liked\", msg.key))\r\n        .catch(() => (liked = false));\r\n    } else {\r\n      ssb\r\n        .unlike(msg.key)\r\n        .then(() => console.log(\"unliked\", msg.key))\r\n        .catch(() => (liked = true));\r\n    }\r\n  };\r\n\r\n  const reply = ev => {\r\n    let root = msg.value.content.root || msg.key;\r\n    let channel = msg.value.content.channel;\r\n    let replyfeed = msg.value.author;\r\n    navigate(\"/compose\", { root, branch: msg.key, channel, replyfeed });\r\n  };\r\n\r\n  const fork = ev => {\r\n    let originalRoot = msg.value.content.root || msg.key;\r\n    let channel = msg.value.content.channel;\r\n    let replyfeed = msg.value.author;\r\n    navigate(\"/compose\", {\r\n      root: msg.key,\r\n      branch: msg.key,\r\n      fork: originalRoot,\r\n      channel,\r\n      replyfeed\r\n    });\r\n  };\r\n\r\n  const goRoot = ev => {\r\n    let rootId = msg.value.content.root || msg.key;\r\n    navigate(\"/thread\", { thread: rootId });\r\n  };\r\n\r\n  const goBranch = ev => {\r\n    let branchId = msg.value.content.branch || msg.key;\r\n    navigate(\"/thread\", { thread: branchId });\r\n  };\r\n</script>\r\n\r\n<style>\r\n  div img.is-image-from-blob {\r\n    max-width: 90%;\r\n  }\r\n\r\n  .card-body {\r\n    overflow-wrap: break-word;\r\n  }\r\n</style>\r\n\r\n<div class=\"card-body\">\r\n  {#if hasContentWarning && showContentWarning}\r\n    <p>{msg.value.content.contentWarning}</p>\r\n    <button\r\n      class=\"btn\"\r\n      on:click={() => (showContentWarning = !showContentWarning)}>\r\n      Show Message\r\n    </button>\r\n  {:else}\r\n    {@html content}\r\n  {/if}\r\n</div>\r\n<div class=\"card-footer\">\r\n  <div class=\"columns col-gapless\">\r\n    <div class=\"column col-6\">\r\n      <label class=\"form-switch d-inline\">\r\n        <input type=\"checkbox\" on:change={likeChanged} checked={liked} />\r\n        <i class=\"form-icon\" />\r\n        Like\r\n      </label>\r\n      {#if msg.value.content.root}\r\n        <span>\r\n          <a\r\n            href=\"?thread={encodeURIComponent(msg.value.content.root)}#/thread\"\r\n            on:click|preventDefault={goRoot}>\r\n            (root)\r\n          </a>\r\n        </span>\r\n      {/if}\r\n      {#if msg.value.content.branch}\r\n        <span>\r\n          <a\r\n            href=\"?thread={encodeURIComponent(msg.value.content.branch)}#/thread\"\r\n            on:click|preventDefault={goBranch}>\r\n            (in reply to)\r\n          </a>\r\n        </span>\r\n      {/if}\r\n    </div>\r\n\r\n    {#if !msg.value.private}\r\n      <div class=\"column col-6 text-right\">\r\n        <button class=\"btn\" on:click={fork}>Fork</button>\r\n\r\n        <button class=\"btn\" on:click={reply}>Reply</button>\r\n      </div>\r\n    {/if}\r\n  </div>\r\n\r\n</div>\r\n",
    "<script>\n  export let msg;\n\n  let rawContent = JSON.stringify(msg, null, 2);\n</script>\n<style>\npre.code {\n    overflow: scroll;\n}\n</style>\n\n<div class=\"card-body\">\n  <pre class=\"code\">\n    <code> {rawContent} </code>\n  </pre>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAqME,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,AACpC,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,cAAC,CAAC,AAClB,OAAO,CAAE,IAAI,AACf,CAAC;AClJD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,OAAO,AACjB,CAAC;AC2DD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,KAAK,CACb,aAAa,CAAE,MAAM,CACrB,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,AAClB,CAAC;AC7BD,sBAAO,CAAC,GAAG,eAAC,CAAC,AACX,MAAM,CAAE,KAAK,IAAI,CAAC,CAAC,UAAU,AAC/B,CAAC,AAED,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,GAAG,AACvB,CAAC,AAKD,aAAa,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,KAAK,CACX,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,MAAM,AAC1B,CAAC;ACvDD,UAAU,eAAC,CAAC,AACV,aAAa,CAAE,UAAU,AAC3B,CAAC;AClEH,GAAG,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACpB,CAAC"
}