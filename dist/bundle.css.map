{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\Patchfox.svelte",
    "..\\src\\Navigation.svelte",
    "..\\src\\views\\Public.svelte",
    "..\\src\\views\\Compose.svelte",
    "..\\src\\messageTypes\\MessageRenderer.svelte",
    "..\\src\\messageTypes\\PostMsg.svelte",
    "..\\src\\messageTypes\\GenericMsg.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount, onDestroy } from \"svelte\";\r\n  import {\r\n    connected,\r\n    route,\r\n    navigate,\r\n    currentView,\r\n    connect,\r\n    reconnect,\r\n    getPref\r\n  } from \"./utils.js\";\r\n  import Navigation from \"./Navigation.svelte\";\r\n\r\n  let useShortColumn = getPref(\"columnSize\", \"short\") == \"short\";\r\n\r\n  const popState = event => {\r\n    if (event.state !== null) {\r\n      console.dir(\"pop\", event.state);\r\n      let { location, data } = event.state;\r\n      route.set({ location, data });\r\n    }\r\n  };\r\n\r\n  const handleUncaughtException = event => {\r\n    console.error(\"Uncaught exception\", event);\r\n    navigate(\"/error\", { error: event.message });\r\n  };\r\n\r\n  const hashChange = event => {\r\n    console.dir(\"hash change\", event);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .reduced-line-length {\r\n    max-width: 840px;\r\n    margin: auto;\r\n  }\r\n</style>\r\n\r\n<svelte:window\r\n  on:popstate={popState}\r\n  on:error={handleUncaughtException}\r\n  on:hashchange={hashChange} />\r\n<div class=\"container bg-gray\">\r\n  <div class=\"columns\">\r\n    <div class=\"column\" class:reduced-line-length={useShortColumn}>\r\n      <Navigation />\r\n      <svelte:component this={$currentView} />\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { connected, navigate, routeLocation } from \"./utils.js\";\r\n\r\n  let avatar = \"/images/icon.png\";\r\n\r\n  $: if ($connected) {\r\n    ssb.avatar(ssb.feed).then(data => {\r\n      avatar = `http://localhost:8989/blobs/get/${data.image}`;\r\n    });\r\n  }\r\n\r\n  const goSettings = ev => navigate(\"/settings\");\r\n  const goCompose = () => navigate(\"/compose\");\r\n  const goPublic = () => navigate(\"/public\");\r\n  const goChannels = () => navigate(\"/channels\");\r\n\r\n  const openSidebar = async ev => {\r\n    let loc = window.location.href;\r\n    browser.sidebarAction.setPanel({ panel: loc });\r\n    browser.sidebarAction.open();\r\n    let tab = await browser.tabs.getCurrent();\r\n    await browser.tabs.remove(tab.id);\r\n  };\r\n\r\n  const closeSidebar = async ev => {\r\n    let loc = await browser.sidebarAction.getPanel({});\r\n    await browser.tabs.create({ url: loc });\r\n    await browser.sidebarAction.close();\r\n  };\r\n\r\n  const openMyProfile = ev => {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n\r\n    if (ssb.feed) {\r\n      navigate(\"/profile\", { feed: ssb.feed });\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .blocker {\r\n    height: 70px;\r\n    display: block;\r\n  }\r\n\r\n  .above {\r\n    z-index: 99999;\r\n    width: 100;\r\n    padding: 5px;\r\n    position: fixed;\r\n  }\r\n\r\n  .current {\r\n    border: none;\r\n    background: none;\r\n    border-bottom: solid 2px rgb(2, 146, 50);\r\n    outline: none;\r\n  }\r\n</style>\r\n\r\n<header class=\"navbar\">\r\n  <section class=\"navbar-section hide-sm\">\r\n    <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={openSidebar}>\r\n      <i class=\"icon icon-minus text-black\" />\r\n    </a>\r\n    <a href=\"#\" class=\"navbar-brand mr-2 p-1\" on:click={openMyProfile}>\r\n      <figure class=\"avatar avatar-lg\">\r\n        <img src={avatar} alt=\"L\" />\r\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\r\n      </figure>\r\n    </a>\r\n    <a\r\n      href=\"#/compose\"\r\n      class=\"btn btn-link\"\r\n      on:click|stopPropagation|preventDefault={goCompose}>\r\n      Compose\r\n    </a>\r\n    <a\r\n      href=\"#/public\"\r\n      class=\"btn btn-link\"\r\n      on:click|stopPropagation|preventDefault={goPublic}>\r\n      Public\r\n    </a>\r\n    <!-- <a\r\n      href=\"#/channels\" \r\n      class=\"btn btn-link\"\r\n      on:click|stopPropagation|preventDefault={goChannels}>\r\n      Channels\r\n    </a> -->\r\n    <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>Settings</a>\r\n    <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\r\n  </section>\r\n  <section class=\"navbar-section show-sm bg-gray above\">\r\n    <button class=\"btn btn-link\" on:click={() => history.back()}>\r\n      <i class=\"icon icon-back\" />\r\n    </button>\r\n    <a href=\"...\" class=\"navbar-brand mr-2 p-1\">\r\n      <figure class=\"avatar\">\r\n        <img src={avatar} alt=\"L\" />\r\n        <i class=\"avatar-presence {$connected ? 'online' : 'offline'}\" />\r\n      </figure>\r\n    </a>\r\n    <div class=\"dropdown float-right\">\r\n      <a\r\n        href=\"?\"\r\n        class=\"btn btn-link dropdown-toggle\"\r\n        tabindex=\"0\"\r\n        on:click|stopPropagation|preventDefault={() => ''}>\r\n        Menu\r\n        <i class=\"icon icon-caret\" />\r\n      </a>\r\n      <!-- menu component -->\r\n      <ul class=\"menu\">\r\n        <li class=\"menu-item\">\r\n          <a\r\n            href=\"#/compose\"\r\n            class=\"btn btn-link\"\r\n            on:click|stopPropagation|preventDefault={goCompose}>\r\n            New\r\n          </a>\r\n        </li>\r\n        <li class=\"menu-item\">\r\n          <a\r\n            href=\"#/public\"\r\n            class=\"btn btn-link\"\r\n            on:click|stopPropagation|preventDefault={goPublic}>\r\n            Public\r\n          </a>\r\n        </li>\r\n        <li class=\"menu-item\">\r\n          <a href=\"#/settings\" class=\"btn btn-link\" on:click={goSettings}>\r\n            Settings\r\n          </a>\r\n        </li>\r\n        <li class=\"menu-item\">\r\n          <a href=\"/docs/index.html\" class=\"btn btn-link\">Help</a>\r\n        </li>\r\n        <li class=\"menu-item\">\r\n          <a href=\"#/sidebar\" class=\"btn btn-link\" on:click={closeSidebar}>\r\n            Open as a Tab\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n  <div class=\"blocker show-sm\" />\r\n</header>\r\n",
    "<script>\r\n  import MessageRenderer from \"../messageTypes/MessageRenderer.svelte\";\r\n  import { navigate, routeParams } from \"../utils.js\";\r\n  let msgs = false;\r\n  let error = $routeParams.error || false;\r\n  let dropdownActive = false;\r\n\r\n  let opts = {\r\n    limit: $routeParams.limit || 10,\r\n    reverse: true\r\n  };\r\n\r\n  let onlyRoots = $routeParams.onlyRoots || false;\r\n\r\n  // todo: move back into using stores.\r\n  $: {\r\n    Object.assign(opts, $routeParams);\r\n\r\n    document.title = `Patchfox - Public`;\r\n\r\n    if (opts.hasOwnProperty(\"lt\")) {\r\n      opts.lt = parseInt(opts.lt);\r\n    }\r\n\r\n    if (opts.hasOwnProperty(\"limit\")) {\r\n      opts.limit = parseInt(opts.limit);\r\n    }\r\n\r\n    let promise = ssb\r\n      .public(opts, { onlyRoots })\r\n      .then(ms => {\r\n        msgs = ms;\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(n => {\r\n        if (!error) {\r\n          console.error(\"errrrooooor\", n);\r\n        }\r\n      });\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .menu-right {\r\n    right: 0px;\r\n    left: unset;\r\n    min-width: 300px;\r\n  }\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <div class=\"columns\">\r\n    <h4 class=\"column\">Public Feed</h4>\r\n    <div class=\"column\">\r\n      <div class=\"dropdown float-right\">\r\n        <span\r\n          class=\"btn btn-link dropdown-toggle\"\r\n          tabindex=\"0\"\r\n          class:active={dropdownActive}\r\n          on:click={() => (dropdownActive = !dropdownActive)}>\r\n          <i class=\"icon icon-more-horiz text-gray\" />\r\n        </span>\r\n        <ul class=\"menu menu-right\">\r\n          <li class=\"menu-item\">\r\n            <label class=\"form-checkbox\">\r\n              <input type=\"checkbox\" bind:checked={onlyRoots} />\r\n              <i class=\"form-icon\" />\r\n              Show Only Roots\r\n            </label>\r\n          </li>\r\n          <li class=\"menu-item\">\r\n            <label class=\"form-label\" for=\"input-example-1\">\r\n              Fetch {opts.limit} messages\r\n            </label>\r\n            <input\r\n              class=\"slider tooltip\"\r\n              bind:value={opts.limit}\r\n              type=\"range\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              value=\"50\" />\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n{#if error}\r\n  <div class=\"toast toast-error\">Error: {error}</div>\r\n{/if}\r\n{#if !msgs}\r\n  <div class=\"loading loading-lg\" />\r\n{:else}\r\n  {#each msgs as msg (msg.key)}\r\n    <MessageRenderer {msg} />\r\n  {/each}\r\n  <ul class=\"pagination\">\r\n    <li class=\"page-item page-previous\">\r\n      <a\r\n        href=\"#/public\"\r\n        on:click|stopPropagation|preventDefault={() => history.back()}>\r\n        <div class=\"page-item-subtitle\">Previous</div>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item page-next\">\r\n      <a\r\n        href=\"#/public\"\r\n        on:click|stopPropagation|preventDefault={() => navigate('/public', {\r\n            lt: msgs[msgs.length - 1].rts,\r\n            limit: opts.limit,\r\n            onlyRoots: opts.onlyRoots\r\n          })}>\r\n        <div class=\"page-item-subtitle\">Next</div>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n{/if}\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import drop from \"drag-and-drop-files\";\r\n  import { slide } from \"svelte/transition\";\r\n  import { navigate, routeParams, reconnect } from \"../utils.js\";\r\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\r\n\r\n  let showPreview = false;\r\n  let msg = false;\r\n  let error = false;\r\n  let posting = false;\r\n\r\n  let root = $routeParams.root;\r\n  let branch = $routeParams.branch;\r\n  let channel = $routeParams.channel || \"\";\r\n  let content = $routeParams.content || \"\";\r\n  let replyfeed = $routeParams.replyfeed || false;\r\n  let fork = $routeParams.fork;\r\n  let fileOnTop = false;\r\n  let pull = hermiebox.modules.pullStream;\r\n  let fileReader = hermiebox.modules.pullFileReader;\r\n  let sbot = hermiebox.sbot;\r\n\r\n  document.title = `Patchfox - compose`;\r\n\r\n  onMount(() => {\r\n    error = false;\r\n    msg = \"\";\r\n\r\n    // this code could be in some better/smarter place.\r\n    // e.dataTransfer.getData('url'); from images in the browser window\r\n\r\n    drop(document.getElementById(\"content\"), files => readFileAndAttach(files));\r\n  });\r\n\r\n  const readFileAndAttach = files => {\r\n    error = false;\r\n    msg = \"\";\r\n\r\n    if (files.length == 0) {\r\n      fileOnTop = false;\r\n      console.log(\"this is not a file\");\r\n      return false;\r\n    }\r\n\r\n    var first = files[0];\r\n    console.log(first);\r\n\r\n    if (!first.type.startsWith(\"image\")) {\r\n      error = true;\r\n      msg = `You can only drag & drop image, this file is a ${first.type}`;\r\n      return false;\r\n    }\r\n\r\n    if (first.size >= 5000000) {\r\n      error = true;\r\n      msg = `File too large: ${Math.floor(\r\n        first.size / 1048576,\r\n        2\r\n      )}mb when max size is 5mb`;\r\n      return false;\r\n    }\r\n\r\n    pull(\r\n      fileReader(first),\r\n      sbot.blobs.add(function(err, hash) {\r\n        // 'hash' is the hash-id of the blob\r\n        if (err) {\r\n          error = true;\r\n          msg = \"Couldn't attach file: \" + err;\r\n        } else {\r\n          content += ` ![${first.name}](${hash})`;\r\n        }\r\n        fileOnTop = false;\r\n      })\r\n    );\r\n  };\r\n\r\n  const post = async ev => {\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n\r\n    if (!posting) {\r\n      posting = true;\r\n\r\n      if (channel.startsWith(\"#\")) {\r\n        channel = channel.slice(1);\r\n      }\r\n\r\n      try {\r\n        msg = await ssb.newPost({ text: content, channel, root, branch, fork });\r\n        posting = false;\r\n        console.log(\"posted\", msg);\r\n        window.scrollTo(0, 0);\r\n      } catch (n) {\r\n        error = true;\r\n        msg = `Couldn't post your message: ${n}`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (msg.message == \"stream is closed\") {\r\n          msg += \". We lost connection to sbot. We'll try to restablish it...\";\r\n\r\n          reconnect()\r\n            .then(() => {\r\n              showPreview = false;\r\n              posting = false;\r\n              error = false;\r\n              msg = \"Connection to sbot reestablished. Try posting again\";\r\n            })\r\n            .catch(err => {\r\n              window.location.search = `?root=${encodeURIComponent(\r\n                root\r\n              )}&branch=${encodeURIComponent(\r\n                branch\r\n              )}&content=${encodeURIComponent(\r\n                content\r\n              )}&channel=${encodeURIComponent(channel)}`;\r\n              msg = `Sorry, couldn't reconnect to sbot:${err}. Try reloading the page. Your content has been saved to the URL`;\r\n            });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const preview = ev => {\r\n    showPreview = true;\r\n  };\r\n\r\n  const saveToURL = ev => {\r\n    window.location.search = `?root=${encodeURIComponent(\r\n      root\r\n    )}&branch=${encodeURIComponent(branch)}&content=${encodeURIComponent(\r\n      content\r\n    )}&channel=${encodeURIComponent(channel)}`;\r\n  };\r\n\r\n  const avatarClick = ev => {\r\n    let feed = ev.detail.feed;\r\n    let name = ev.detail.name;\r\n\r\n    if (content.length > 0) {\r\n      content += ` [${name}](${feed})`;\r\n    } else {\r\n      content = `[${name}](${feed})`;\r\n    }\r\n  };\r\n\r\n  const dragOver = ev => {\r\n    fileOnTop = true;\r\n  };\r\n\r\n  const dragLeave = ev => {\r\n    fileOnTop = false;\r\n  };\r\n\r\n  const attachFileTrigger = () => {\r\n    document.getElementById(\"fileInput\").click();\r\n  };\r\n\r\n  const attachFile = ev => {\r\n    const files = ev.target.files;\r\n    readFileAndAttach(files);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .file-on-top {\r\n    border: solid 2px rgb(26, 192, 11);\r\n  }\r\n\r\n  input[type=\"file\"] {\r\n    display: none;\r\n  }\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <div class=\"columns\">\r\n    <div class=\"column\">\r\n      {#if fork}\r\n        <div class=\"toast toast-warning\">You are forking: {fork}</div>\r\n      {/if}\r\n      {#if msg}\r\n        {#if error}\r\n          <div class=\"toast toast-error\">{msg}</div>\r\n        {:else}\r\n          <div class=\"toast toast-success\">\r\n            Your message has been posted. Do you want to\r\n            <a\r\n              target=\"_blank\"\r\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\">\r\n              Check it out?\r\n            </a>\r\n          </div>\r\n        {/if}\r\n      {/if}\r\n      {#if !showPreview}\r\n        <div class=\"form-group\" in:slide out:slide>\r\n          <label class=\"form-label\" for=\"channel\">Channel</label>\r\n          <input\r\n            class=\"form-input\"\r\n            type=\"text\"\r\n            id=\"channel\"\r\n            placeholder=\"channel\"\r\n            bind:value={channel} />\r\n\r\n          {#if branch}\r\n            <label class=\"form-label\" for=\"reply-to\">In reply to</label>\r\n            <input\r\n              class=\"form-input\"\r\n              type=\"text\"\r\n              id=\"reply-to\"\r\n              placeholder=\"in reply to\"\r\n              bind:value={branch} />\r\n          {/if}\r\n\r\n          {#if replyfeed}\r\n            <div class=\"mt-2\">\r\n              <span>\r\n                Click the avatar to add a link to the message:\r\n                <AvatarChip feed={replyfeed} on:avatarClick={avatarClick} />\r\n              </span>\r\n            </div>\r\n          {/if}\r\n          <label class=\"form-label\" for=\"content\">Message</label>\r\n          <textarea\r\n            class=\"form-input\"\r\n            id=\"content\"\r\n            placeholder=\"Type in your post\"\r\n            rows=\"10\"\r\n            on:dragover|preventDefault|stopPropagation={dragOver}\r\n            on:dragleave|preventDefault|stopPropagation={dragLeave}\r\n            class:file-on-top={fileOnTop}\r\n            bind:value={content} />\r\n          <br />\r\n          <input type=\"file\" on:input={attachFile} id=\"fileInput\" />\r\n          <button class=\"btn\" on:click={attachFileTrigger}>Attach File</button>\r\n          <button class=\"btn btn-primary float-right\" on:click={preview}>\r\n            Preview\r\n          </button>\r\n        </div>\r\n      {:else}\r\n        <div class=\"column col-md-12\">\r\n          <h2>Post preview</h2>\r\n          {#if channel || root || branch}\r\n            <blockquote>\r\n              {#if channel}\r\n                <p>\r\n                  <b>Channel:</b>\r\n                   {channel.startsWith('#') ? channel.slice(1) : channel}\r\n                </p>\r\n              {/if}\r\n              {#if root}\r\n                <p>\r\n                  <b>Root:</b>\r\n                   {root}\r\n                </p>\r\n              {/if}\r\n              {#if branch}\r\n                <p>\r\n                  <b>In Reply To:</b>\r\n                   {branch}\r\n                </p>\r\n              {/if}\r\n            </blockquote>\r\n          {/if}\r\n          {@html ssb.markdown(content)}\r\n\r\n          <div class=\"divider\" />\r\n          <div class=\"columns\">\r\n            <div class=\"column col-md-12 col-lg-10\">\r\n              <span class=\"label label-warning\">\r\n                This message will be public and can't be edited or deleted\r\n              </span>\r\n            </div>\r\n            <div class=\"column col-md-12 col-lg-2\">\r\n              <button class=\"btn\" on:click={() => (showPreview = false)}>\r\n                Go Back\r\n              </button>\r\n              <button\r\n                class=\"btn btn-primary\"\r\n                class:loading={posting}\r\n                on:click={post}>\r\n                Post\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\n  import PostMsg from \"./PostMsg.svelte\";\n  import GenericMsg from \"./GenericMsg.svelte\";\n  import VoteMsg from \"./VoteMsg.svelte\";\n  import PrivateMsg from \"./PrivateMsg.svelte\";\n  import ContactMsg from \"./ContactMsg.svelte\";\n  import ChannelMsg from \"./ChannelMsg.svelte\";\n  import AboutMsg from \"./AboutMsg.svelte\";\n  import PubMsg from \"./PubMsg.svelte\";\n  import BlogMsg from \"./BlogMsg.svelte\";\n  import AvatarChip from \"../parts/AvatarChip.svelte\";\n  import timestamp from \"../parts/timestamp.js\";\n  import { navigate } from \"../utils.js\";\n\n  export let msg;\n\n  let type;\n  let feed = msg.value.author;\n  let showRaw = false;\n  let rawContent = JSON.stringify(msg, null, 2);\n  let dropdownActive = false;\n\n  let messageTypes = {\n    \"*\": GenericMsg,\n    post: PostMsg,\n    vote: VoteMsg,\n    private: PrivateMsg,\n    contact: ContactMsg,\n    channel: ChannelMsg,\n    about: AboutMsg,\n    pub: PubMsg,\n    blog: BlogMsg\n  };\n\n  let selectedRenderer;\n\n  if (typeof msg.value.content === \"string\") {\n    type = \"private\";\n  } else {\n    type = msg.value.content.type;\n  }\n\n  if (messageTypes.hasOwnProperty(type)) {\n    selectedRenderer = messageTypes[type];\n  } else {\n    selectedRenderer = messageTypes[\"*\"];\n  }\n\n  let image = \"images/icon.png\";\n  let name = feed;\n\n  ssb.avatar(feed).then(data => {\n    if (data.image !== null) {\n      image = `http://localhost:8989/blobs/get/${data.image}`;\n    }\n    name = data.name;\n  });\n\n  const toggleRawMessage = () => {\n    showRaw = !showRaw;\n    dropdownActive = false;\n  };\n\n  const copyPermalink = () => {\n    navigator.clipboard\n      .writeText(`ssb:${msg.key}`)\n      .then(() => console.log(\"permalink copied\"))\n      .catch(err => console.error(\"can't copy permalink\", err));\n\n    dropdownActive = false;\n  };\n\n  const copyHash = () => {\n    navigator.clipboard\n      .writeText(`${msg.key}`)\n      .then(() => console.log(\"hash copied\"))\n      .catch(err => console.error(\"can't copy hash\", err));\n\n    dropdownActive = false;\n  };\n\n  const goProfile = (ev) => {\n     if (ev.ctrlKey) {\n      window.open(`?feed=${encodeURIComponent(feed)}#/profile`);\n    } else {\n      navigate('/profile', { feed })\n    }\n  }\n</script>\n\n<style>\n  .raw-content {\n    width: 50%;\n  }\n\n  .feed-display {\n    cursor: pointer;\n  }\n\n  .channel-display {\n    cursor: pointer;\n  }\n\n  .menu-right {\n    right: 0px;\n    left: unset;\n    min-width: 300px;\n  }\n</style>\n\n<div class=\"card m-2\">\n  <div class=\"card-header\">\n    <div class=\"float-left\">\n      <div class=\"card-title\">\n        <div\n          class=\"tile tile-centered feed-display\"\n          on:click={goProfile}>\n          <div class=\"tile-icon\">\n            <div class=\"example-tile-icon\">\n              <img src={image} class=\"avatar avatar-lg\" alt={feed} />\n            </div>\n          </div>\n          <div class=\"tile-content\">\n            <div class=\"tile-title\">{name}</div>\n            <small class=\"tile-subtitle text-gray\">\n               {timestamp(msg.value.timestamp)}\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"float-right\">\n\n      <span\n        class=\"text-gray channel-display\"\n        on:click={() => navigate('/channel', {\n            channel: msg.value.content.channel\n          })}>\n        {#if msg.value.content.channel}#{msg.value.content.channel}{/if}\n      </span>\n      <div class=\"dropdown\">\n        <span\n          class=\"btn btn-link dropdown-toggle\"\n          tabindex=\"0\"\n          class:active={dropdownActive}\n          on:click={() => (dropdownActive = !dropdownActive)}>\n          <i class=\"icon icon-more-vert\" />\n        </span>\n        <ul class=\"menu menu-right\">\n          <li class=\"menu-item\">\n\n            <a\n              href=\"?thread={encodeURIComponent(msg.key)}#/thread\"\n              target=\"_blank\">\n              <i class=\"icon icon-share\" />\n              Open in new tab\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyPermalink}>\n              <i class=\"icon icon-copy\" />\n              Copy permalink to clipboard\n            </a>\n          </li>\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={copyHash}>\n              <i class=\"icon icon-copy\" />\n              Copy message id to clipboard\n            </a>\n          </li>\n          <li class=\"divider\" data-content=\"FOR THE CURIOUS\" />\n          <li class=\"menu-item\">\n            <a href=\"#\" on:click|preventDefault={toggleRawMessage}>\n              <i class=\"icon icon-message\" />\n              {#if !showRaw}Show raw message{:else}Close raw message{/if}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  {#if !showRaw}\n    <svelte:component this={selectedRenderer} {msg} />\n  {:else}\n    <div class=\"card-body\">\n      <div class=\"columns\">\n        <div class=\"column col-9\">\n          <pre class=\"code\">\n            <code>{rawContent}</code>\n          </pre>\n        </div>\n        <div class=\"column col-3\">\n          <p>\n            This is a message of type\n            <em>{type}</em>\n            .\n          </p>\n          <p>\n            To learn more about it, go to\n            <a target=\"_blank\" href=\"/docs/index.html#/message_types/{type}\">\n              the documentation about messages with type {type}\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script>\r\n  import { navigate } from \"../utils.js\";\r\n\r\n  export let msg;\r\n\r\n  let content = ssb.markdown(msg.value.content.text);\r\n  let liked = false;\r\n\r\n  ssb.votes(msg.key).then(ms => {\r\n    ms.forEach(m => {\r\n      let author = m.value.author;\r\n      if (author === ssb.feed && m.value.content.vote.value === 1) {\r\n        liked = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  const likeChanged = ev => {\r\n    let v = ev.target.checked;\r\n    if (v) {\r\n      ssb\r\n        .like(msg.key)\r\n        .then(() => console.log(\"liked\", msg.key))\r\n        .catch(() => (liked = false));\r\n    } else {\r\n      ssb\r\n        .unlike(msg.key)\r\n        .then(() => console.log(\"unliked\", msg.key))\r\n        .catch(() => (liked = true));\r\n    }\r\n  };\r\n\r\n  const reply = ev => {\r\n    let rootId = msg.value.content.root || msg.key;\r\n    let channel = msg.value.content.channel;\r\n    let replyfeed = msg.value.author;\r\n    navigate(\"/compose\", { root: rootId, branch: msg.key, channel, replyfeed });\r\n  };\r\n\r\n  const fork = ev => {\r\n    let channel = msg.value.content.channel;\r\n    let replyfeed = msg.value.author;\r\n    navigate(\"/compose\", { fork: msg.key, channel, replyfeed });\r\n  };\r\n\r\n  const goRoot = ev => {\r\n    let rootId = msg.value.content.root || msg.key;\r\n    navigate(\"/thread\", { thread: rootId });\r\n  };\r\n\r\n  const goBranch = ev => {\r\n    let branchId = msg.value.content.branch || msg.key;\r\n    navigate(\"/thread\", { thread: branchId });\r\n  };\r\n</script>\r\n\r\n<style>\r\n  div img.is-image-from-blob {\r\n    max-width: 90%;\r\n  }\r\n\r\n  .card-body {\r\n    overflow-wrap: break-word;\r\n  }\r\n</style>\r\n\r\n<div class=\"card-body\">\r\n  {@html content}\r\n</div>\r\n<div class=\"card-footer\">\r\n  <div class=\"columns col-gapless\">\r\n    <div class=\"column col-6\">\r\n      <label class=\"form-switch d-inline\">\r\n        <input type=\"checkbox\" on:change={likeChanged} checked={liked} />\r\n        <i class=\"form-icon\" />\r\n        Like\r\n      </label>\r\n      {#if msg.value.content.root}\r\n        <span>\r\n          <a\r\n            href=\"?thread={encodeURIComponent(msg.value.content.root)}#/thread\"\r\n            on:click|preventDefault={goRoot}>\r\n            (root)\r\n          </a>\r\n        </span>\r\n      {/if}\r\n      {#if msg.value.content.branch}\r\n        <span>\r\n          <a\r\n            href=\"?thread={encodeURIComponent(msg.value.content.branch)}#/thread\"\r\n            on:click|preventDefault={goBranch}>\r\n            (in reply to)\r\n          </a>\r\n        </span>\r\n      {/if}\r\n    </div>\r\n\r\n    <div class=\"column col-6 text-right\">\r\n      <button class=\"btn\" on:click={fork}>Fork</button>\r\n\r\n      <button class=\"btn\" on:click={reply}>Reply</button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n",
    "<script>\n  export let msg;\n\n  let rawContent = JSON.stringify(msg, null, 2);\n</script>\n<style>\npre.code {\n    overflow: scroll;\n}\n</style>\n\n<div class=\"card-body\">\n  <pre class=\"code\">\n    <code> {rawContent} </code>\n  </pre>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkCE,oBAAoB,cAAC,CAAC,AACpB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,AACd,CAAC;ACID,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,KAAK,AACjB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACxC,OAAO,CAAE,IAAI,AACf,CAAC;ACfD,WAAW,cAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,KAAK,CACX,SAAS,CAAE,KAAK,AAClB,CAAC;ACuHD,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,AACpC,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,cAAC,CAAC,AAClB,OAAO,CAAE,IAAI,AACf,CAAC;AC7ED,aAAa,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAgB,eAAC,CAAC,AAChB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,KAAK,CACX,SAAS,CAAE,KAAK,AAClB,CAAC;AC9CD,UAAU,eAAC,CAAC,AACV,aAAa,CAAE,UAAU,AAC3B,CAAC;ACzDH,GAAG,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACpB,CAAC"
}